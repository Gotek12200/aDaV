library(ggplot2)
library(ggpubr)
library(kableExtra)
library(tidyverse)
library(readr)
library(knitr)
library(weathermetrics)
library(gridExtra)
library(plotly)
library(GGally)
library(magrittr)
library(regclass)
library(MASS)
library(pROC)
library(caret)
library(car)
})
data <- read.csv("data/Spotify-2000.csv")
kable(head(data, 10)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "800px", height = "500px")
kable(tail(data, 10)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "800px", height = "500px")
str(data)
#mutate our data so character values become factors
data <- data %>%
mutate_if(is.character, as.factor) %>%
mutate(Length..Duration. = as.integer(Length..Duration.))
str(data)
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings({
library(dplyr)
library(ggplot2)
library(ggpubr)
library(kableExtra)
library(tidyverse)
library(readr)
library(knitr)
library(weathermetrics)
library(gridExtra)
library(plotly)
library(GGally)
library(magrittr)
library(regclass)
library(MASS)
library(pROC)
library(caret)
library(car)
})
data <- read.csv("data/Spotify-2000.csv")
kable(head(data, 10)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "800px", height = "500px")
kable(tail(data, 10)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "800px", height = "500px")
str(data)
#mutate our data so character values become factors
data <- data %>%
mutate_if(is.character, as.factor) %>%
mutate(Length..Duration. = as.integer(Length..Duration.))
str(data)
data %>%
group_by(Top.Genre) %>%
summarise(Avg_Popularity = mean(Popularity, na.rm = TRUE),
Count = n()) %>%
filter(Count > 10) %>%
arrange(desc(Avg_Popularity)) %>%
top_n(10, Avg_Popularity) %>%
ggplot(aes(x = reorder(Top.Genre, Avg_Popularity), y = Avg_Popularity)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(title = "Top 10 Genres by Average Popularity",
x = "Genre", y = "Average Popularity")
data %>%
mutate(Demi.Decade = (Year %/% 5) * 5) %>%
group_by(Demi.Decade) %>%
summarise(Avg_Popularity = mean(Popularity, na.rm = TRUE)) %>%
ggplot(aes(x = Demi.Decade, y = Avg_Popularity)) +
geom_line()
data %>%
group_by(Year) %>%
summarise(Avg_Popularity = mean(Popularity, na.rm = TRUE)) %>%
ggplot(aes(x = Year, y = Avg_Popularity)) +
geom_line()
?group_by
ggplot(data, aes(x = Loudness..dB., y = Popularity)) +
geom_point() +
scale_color_gradient(trans = "log10")
train_index <- createDataPartition(data$Popularity, p = .7,
list = FALSE,
times = 1)
data_train <- data[train_index,]
data_val_and_test <- data[-train_index,]
val_index <- createDataPartition(data_val_and_test$Popularity, p = .66,
list = FALSE,
times = 1)
data_valid <- data_val_and_test[val_index,]
data_test  <- data_val_and_test[-val_index,]
dataset_partitions <- data.frame(
"Dataset" = c("Full Dataset", "Validation and Test Set", "Training Set", "Validation Set", "Test Set"),
"N of Obs" = c(nrow(data), nrow(data_val_and_test), nrow(data_train), nrow(data_valid), nrow(data_test)),
"% Split" = c(
sprintf("%%%s", round(((nrow(data) / nrow(data))*100), 2)),
sprintf("%%%s", round(((nrow(data_val_and_test) / nrow(data))*100), 2)),
sprintf("%%%s", round(((nrow(data_train) / nrow(data))*100), 2)),
sprintf("%%%s", round(((nrow(data_valid) / nrow(data))*100), 2)),
sprintf("%%%s", round(((nrow(data_test) / nrow(data))*100), 2))
)
)
dataset_partitions %>%
kbl(caption = "Dataset Partitions") %>%
kable_classic(full_width = F, html_font = "Cambria")
# Combine the datasets, adding a column to distinguish them
combined_data <- bind_rows(
mutate(data_train, Set = "Training"),
mutate(data_valid, Set = "Validation"),
mutate(data_test, Set = "Test")
)
ggplot(combined_data, aes(x = Popularity, colour = Set)) +
geom_density(trim = T, linewidth = 1) +
labs(title = "Popularity Distribution Across Datasets",
x = "Popularity",
y = "Frequency") +
theme_minimal()
# Output: character vector of formulas
generate_formulas <- function(p, x_vars, y_var) {
# Input checking
if (p %% 1 != 0)           stop("Input an integer n")
if (p > length(x_vars))    stop("p should be smaller than number of vars")
if (!is.character(x_vars)) stop("x_vars should be a character vector")
if (!is.character(y_var))  stop("y_vars should be character type")
# combn generates all combinations, apply turns them into formula strings
apply(combn(x_vars, p), 2, function(vars) {
paste0(y_var, " ~ ", paste(vars, collapse = " + "))
})
}
lm_mse <- function(formula, train_data, valid_data) {
y_name <- as.character(formula)[2]
y_true <- valid_data[[y_name]]
lm_fit <- lm(formula, train_data)
y_pred <- predict(lm_fit, newdata = valid_data)
mean((y_true - y_pred)^2)
}
pred_names <- setdiff(colnames(data), c("Index", "Title", "Artist", "Top.Genre", "Year", "Popularity"))
pred_set <- function(pred_count, pred_names, out_name, train_data, valid_data) {
formulas <- generate_formulas(pred_count, pred_names, out_name)
mses <- rep(0, length(formulas))
for (i in 1:length(formulas)) {
mses[i] <- lm_mse(as.formula(formulas[i]), train_data, valid_data)
}
formulas[which.min(mses)]
}
pred_set(1, pred_names, "Popularity", data_train, data_valid)
pred_set <- function(pred_count, pred_names, out_name, train_data, valid_data) {
formulas <- generate_formulas(pred_count, pred_names, out_name)
mses <- rep(0, length(formulas))
for (i in 1:length(formulas)) {
mses[i] <- lm_mse(as.formula(formulas[i]), train_data, valid_data)
}
list(
set = formulas[which.min(mses)],
mse = mses[which.min(mses)]
)
}
pred_set(1, pred_names, "Popularity", data_train, data_valid)
pred_set <- function(pred_count, pred_names, out_name, train_data, valid_data) {
formulas <- generate_formulas(pred_count, pred_names, out_name)
mses <- rep(0, length(formulas))
for (i in 1:length(formulas)) {
mses[i] <- lm_mse(as.formula(formulas[i]), train_data, valid_data)
}
list(
set = formulas[which.min(mses)],
mse = min(mses)
)
}
pred_set(1, pred_names, "Popularity", data_train, data_valid)
pred_set(2, pred_names, "Popularity", data_train, data_valid)
pred_set(3, pred_names, "Popularity", data_train, data_valid)
pred_set(4, pred_names, "Popularity", data_train, data_valid)
colnames(data)
pred_names <- setdiff(colnames(data), c("Index", "Title", "Artist", "Top.Genre", "Popularity"))
pred_set <- function(pred_count, pred_names, out_name, train_data, valid_data) {
formulas <- generate_formulas(pred_count, pred_names, out_name)
mses <- rep(0, length(formulas))
for (i in 1:length(formulas)) {
mses[i] <- lm_mse(as.formula(formulas[i]), train_data, valid_data)
}
list(
set = formulas[which.min(mses)],
mse = min(mses)
)
}
pred_set(1, pred_names, "Popularity", data_train, data_valid)
pred_set(2, pred_names, "Popularity", data_train, data_valid)
pred_set(3, pred_names, "Popularity", data_train, data_valid)
pred_set(4, pred_names, "Popularity", data_train, data_valid)
ggplot(data, aes(x = Danceability, y = Speechiness, colour = Popularity)) +
geom_point() +
scale_color_gradient(trans = "log10")
ggplot(data, aes(x = Danceability, y = Speechiness, colour = Popularity)) +
geom_point() +
scale_color_gradient(trans = "log100")
ggplot(data, aes(x = Danceability, y = Speechiness, colour = Popularity)) +
geom_point() +
scale_color_gradient(trans = "log10")
# I made a neat function for finding the best set of predictors
pred_set <- function(pred_count, pred_names, out_name, train_data, valid_data) {
formulas <- generate_formulas(pred_count, pred_names, out_name)
mses <- rep(0, length(formulas))
for (i in 1:length(formulas)) {
mses[i] <- lm_mse(as.formula(formulas[i]), train_data, valid_data)
}
list(
set = formulas[which.min(mses)],
mse = min(mses)
)
}
# Testing for the best set of predictors without including year
pred_names <- setdiff(colnames(data), c("Index", "Title", "Artist", "Top.Genre", "Year", "Popularity"))
pred_set(1, pred_names, "Popularity", data_train, data_valid)
pred_set(2, pred_names, "Popularity", data_train, data_valid)
pred_set(3, pred_names, "Popularity", data_train, data_valid)
pred_set(4, pred_names, "Popularity", data_train, data_valid)
# Testing for the best set of predictors INCLUDING year
pred_names_y <- setdiff(colnames(data), c("Index", "Title", "Artist", "Top.Genre", "Popularity"))
pred_set(1, pred_names_y, "Popularity", data_train, data_valid)
pred_set(2, pred_names_y, "Popularity", data_train, data_valid)
pred_set(3, pred_names_y, "Popularity", data_train, data_valid)
pred_set(4, pred_names_y, "Popularity", data_train, data_valid)
#impact of year of popularity. How much of the popularity is nostalgia
data %>%
mutate(Demi.Decade = (Year %/% 5) * 5) %>%
group_by(Demi.Decade) %>%
summarise(Avg_Popularity = mean(Popularity, na.rm = TRUE)) %>%
ggplot(aes(x = Demi.Decade, y = Avg_Popularity)) +
geom_col()
data %>%
group_by(Year) %>%
summarise(Avg_Popularity = mean(Popularity, na.rm = TRUE)) %>%
ggplot(aes(x = Year, y = Avg_Popularity)) +
geom_line()
?group_by
#impact of year of popularity. How much of the popularity is nostalgia
data %>%
mutate(Demi.Decade = (Year %/% 5) * 5) %>%
group_by(Demi.Decade) %>%
summarise(Avg_Popularity = mean(Popularity, na.rm = TRUE)) %>%
ggplot(aes(x = Demi.Decade, y = Avg_Popularity)) +
geom_col()
data %>%
group_by(Year) %>%
summarise(Avg_Popularity = mean(Popularity, na.rm = TRUE)) %>%
ggplot(aes(x = Year, y = Avg_Popularity)) +
geom_col()
?group_by
ggplot(data, aes(y = Loudness, x = Danceability, colour = Popularity)) +
geom_hex()
ggplot(data, aes(y = Loudness..dB., x = Danceability, colour = Popularity)) +
geom_hex()
ggplot(data, aes(y = Popularity, x = Danceability)) +
geom_hex()
?geom_hex
ggplot(data, aes(y = Popularity, x = Danceability, colour = Top.Genre)) +
geom_hex()
data %>%
group_by(Top.Genre) %>%
summarise(Avg_Popularity = mean(Popularity, na.rm = TRUE),
Count = n()) %>%
filter(Count > 10) %>%
ggplot(data, aes(y = Popularity, x = Danceability, colour = Top.Genre)) +
geom_hex()
data %>%
group_by(Top.Genre) %>%
summarise(Avg_Popularity = mean(Popularity, na.rm = TRUE),
Count = n()) %>%
filter(Count > 10) %>%
ggplot(aes(y = Popularity, x = Danceability, colour = Top.Genre)) +
geom_hex()
data %>%
group_by(Top.Genre) %>%
summarise(Avg_Popularity = mean(Popularity, na.rm = TRUE),
Count = n()) %>%
filter(Count > 10) %>%
ggplot(aes(y = Popularity, x = Danceability, colour = Top.Genre)) +
geom_hex()
data %>%
group_by(Top.Genre) %>%
summarise(Avg_Popularity = mean(Popularity, na.rm = TRUE),
Count = n()) %>%
filter(Count > 10) %>%
ggplot(., aes(y = Popularity, x = Danceability, colour = Top.Genre)) +
geom_hex()
ggplot(., aes(y = Popularity, x = Danceability, colour = Top.Genre)) +
geom_hex()
ggplot(data, aes(y = Popularity, x = Danceability, colour = Top.Genre)) +
geom_hex()
ggplot(data, aes(y = Loudness, x = Danceability, colour = Popularity)) +
geom_hex()
ggplot(data, aes(y = Loudness, x = Danceability, colour = Popularity)) +
geom_point()
ggplot(data, aes(y = Loudness..dB., x = Danceability, colour = Popularity)) +
geom_point()
ggplot(data, aes(y = Loudness..dB., x = Danceability, colour = Popularity)) +
geom_point() +
geom_jitter()
ggplot(data, aes(y = Loudness..dB., x = Danceability, colour = Popularity)) +
geom_point() +
scale_colour_gradient(trans = "log10")
ggplot(data, aes(y = Loudness..dB., x = Danceability, colour = Popularity)) +
geom_point() +
scale_colour_gradient(trans = "log10") +
geom_jitter()
ggplot(data, aes(y = Loudness..dB., x = Danceability, colour = Popularity)) +
geom_point() +
scale_colour_gradient(trans = "-log10") +
geom_jitter()
ggplot(data, aes(y = Loudness..dB., x = Danceability, colour = Popularity)) +
geom_point() +
scale_colour_gradient(trans = "log10") +
geom_jitter()
ggplot(data, aes(y = Loudness..dB., x = Danceability, colour = Popularity)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Speechiness, x = Danceability, colour = Popularity)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Danceability, colour = Energy, size = Loudness)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Danceability, colour = Energy, size = Loudness..dB.)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Danceability, colour = Energy, size = -Loudness..dB.)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Danceability, colour = Energy, size = Loudness..dB.)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
-
ggplot(data, aes(y = Popularity, x = Danceability, colour = Energy, size = -Loudness..dB.)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Danceability, colour = Energy, size = Loudness..dB.)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Danceability, colour = Energy, size = -Loudness..dB.)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Danceability, colour = Energy, size = -Loudness..dB.)) +
geom_point(alpha = 0.5) +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Danceability, colour = Energy, size = -Loudness..dB.)) +
geom_point(alpha = 0.1) +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Danceability, colour = Energy, size = -Loudness..dB.)) +
geom_point(alpha(0.5)) +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Danceability, colour = Energy, size = -Loudness..dB., alpha(0.5))) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Danceability, colour = Energy, size = -Loudness..dB., alpha(0.1))) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Danceability, colour = Energy, size = -Loudness..dB., alpha = 0.1))) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Danceability, colour = Energy, size = -Loudness..dB., alpha = 0.1)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Danceability, colour = Energy, size = -Loudness..dB., alpha = 0.1)) +
geom_point() +
#  scale_colour_gradient(trans = "log") +
#  geom_jitter()
?geom_hex
ggplot(data, aes(y = Popularity, x = Danceability, colour = Energy, size = -Loudness..dB., alpha = 0.1)) +
geom_point() #+
?geom_hex
ggplot(data, aes(y = Energy, x = Danceability, colour = Popularity, size = -Loudness..dB., alpha = 0.1)) +
geom_point() #+
ggplot(data, aes(y = Energy, x = Danceability, colour = Popularity, size = -Loudness..dB., alpha = Popularity)) +
geom_point() #+
ggplot(data, aes(y = Energy, x = Danceability, colour = Popularity, size = -Loudness..dB., alpha = Popularity)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Energy, x = Danceability, colour = Popularity, size = -Loudness..dB., alpha = -Popularity)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Loudness..dB., x = Danceability, colour = Popularity, size = Energy, alpha = -Popularity)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Loudness..dB., x = Danceability, colour = Popularity, size = Energy, alpha = 0.1)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Loudness..dB., x = Danceability, colour = Popularity, alpha = 0.1)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Loudness..dB., x = Danceability, colour = Popularity, alpha = Popularity)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Loudness..dB., x = Danceability, colour = Popularity, alpha = -Popularity)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Loudness..dB., x = Danceability, colour = Popularity, alpha = -Popularity)) +
geom_point() +
geom_jitter()
ggplot(data, aes(y = Year, x = Danceability, colour = Popularity, alpha = -Popularity)) +
geom_point() +
geom_jitter()
ggplot(data, aes(y = Year, x = Danceability, colour = Popularity, alpha = -Popularity)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Year, colour = Danceability, alpha = Loudness..Db. ) +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Year, colour = Danceability, alpha = Loudness..Db. )) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Year, colour = Danceability, alpha = Loudness..Db. )) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Year, colour = Danceability, alpha = Loudness..dB.)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Year, colour = Danceability, size = Loudness..dB., alpha = 0.1)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Year, colour = Danceability, size = Loudness..dB./2, alpha = 0.1)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Year, colour = Danceability, size = Loudness..dB.-2, alpha = 0.1)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Year, colour = Danceability, size = -Loudness..dB., alpha = 0.1)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Year, colour = Danceability, alpha = 0.1)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Year, colour = Danceability, alpha = -Danceability)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Year, colour = Danceability, alpha = -Loudness..dB.)) +
geom_point() +
scale_colour_gradient(trans = "log") +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Year, colour = Danceability, alpha = -Loudness..dB.)) +
geom_point() +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Year)) +
geom_point() +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Year, color = Danceability)) +
geom_point() +
geom_jitter()
ggplot(data, aes(y = Popularity, x = Year)) +
geom_hex
ggplot(data, aes(y = Popularity, x = Year)) +
geom_hex()
ggplot(data, aes(y = Popularity, x = Year)) +
scale_colour_gradient(trans = "log") +
geom_hex()
ggplot(data, aes(y = Popularity, x = Year)) +
geom_hex() +
scale_colour_gradient(trans = "log")
ggplot(data, aes(y = Popularity, x = Year)) +
geom_hex() +
scale_colour_gradient(trans = "log10")
ggplot(data, aes(y = Popularity, x = Year)) +
geom_hex() +
scale_fill_gradient(trans = "log")
ggplot(data, aes(y = Popularity, x = Year)) +
geom_hex()
ggplot(data, aes(y = Popularity, x = Year)) +
geom_hex() +
scale_fill_gradient(trans = "log")
ggplot(data, aes(y = Popularity, x = Year)) +
geom_hex()
