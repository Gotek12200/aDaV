y_name <- as.character(formula)[2]
y_true <- valid_data[[y_name]]
lm_fit <- lm(formula, train_data)
y_pred <- predict(lm_fit, newdata = valid_data)
mean((y_true - y_pred)^2)
}
# I made a neat function for finding the best set of predictors
pred_set <- function(pred_count, pred_names, out_name, train_data, valid_data) {
formulas <- generate_formulas(pred_count, pred_names, out_name)
mses <- rep(0, length(formulas))
for (i in 1:length(formulas)) {
mses[i] <- lm_mse(as.formula(formulas[i]), train_data, valid_data)
}
list(
set = formulas[which.min(mses)],
mse = min(mses)
)
}
# Testing for the best set of predictors without including year
pred_names <- setdiff(colnames(data), c("Index", "Title", "Artist", "Top.Genre", "Year", "Popularity"))
pred_set(1, pred_names, "Popularity", data_train, data_valid)
pred_set(2, pred_names, "Popularity", data_train, data_valid)
pred_set(3, pred_names, "Popularity", data_train, data_valid)
pred_set(4, pred_names, "Popularity", data_train, data_valid)
# Testing for the best set of predictors INCLUDING year
pred_names_y <- setdiff(colnames(data), c("Index", "Title", "Artist", "Top.Genre", "Popularity"))
pred_set(1, pred_names_y, "Popularity", data_train, data_valid)
pred_set(2, pred_names_y, "Popularity", data_train, data_valid)
pred_set(3, pred_names_y, "Popularity", data_train, data_valid)
pred_set(4, pred_names_y, "Popularity", data_train, data_valid)
library(glmnet)
# Prepare model matrices
x <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_train)[, -1]
y <- data_train$Popularity
x_valid <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_valid)[, -1]
y_valid <- data_valid$Popularity
# Lasso Regression with cross-validation
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda <- cv_lasso$lambda.min
# Fit final model
lasso_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
# Predict on validation data
pred_valid <- predict(lasso_model, s = best_lambda, newx = x_valid)
# Compute validation MSE
lasso_mse <- mean((y_valid - pred_valid)^2)
lasso_mse
coef(lasso_model)
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings({
library(dplyr)
library(ggplot2)
library(ggpubr)
library(kableExtra)
library(tidyverse)
library(readr)
library(knitr)
library(weathermetrics)
library(gridExtra)
library(plotly)
library(GGally)
library(magrittr)
library(regclass)
library(MASS)
library(pROC)
library(caret)
library(car)
library(glmnet)
})
# Set seed for reproducibility
set.seed(123)
data <- read.csv("data/Spotify-2000.csv")
kable(head(data, 10)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "800px", height = "500px")
kable(tail(data, 10)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "800px", height = "500px")
str(data)
#mutate our data so character values become factors
data <- data %>%
mutate_if(is.character, as.factor) %>%
mutate(Length..Duration. = as.integer(Length..Duration.))
str(data)
numeric_columns <- data %>%
dplyr::select(where(is.numeric)) %>%
dplyr::select(-any_of("ID"))
# Plot de heatmap
ggcorr(
numeric_columns,
label = FALSE,
layout.exp = 1,
low = "#7FFF7F",          # groen voor lage correlatie
mid = "white",
high = "#FF4C4C",         # rood voor hoge correlatie
name = "Correlatie"
) +
labs(
title = "Correlatie tussen numerieke variabelen",
caption = "Rood = sterke correlatie, Groen = zwak of geen correlatie"
)
data_long <- data %>%
dplyr::select(Year, Danceability, Energy, Loudness..dB., Popularity) %>%
pivot_longer(cols = c(Danceability, Energy, Loudness..dB., Popularity),
names_to = "Feature",
values_to = "Value") %>%
group_by(Year, Feature) %>%
summarise(Avg_Value = mean(Value, na.rm = TRUE), .groups = "drop")
ggplot(data_long, aes(x = Year, y = Avg_Value, color = Feature)) +
geom_line(size = 1) +
labs(title = "Trends of some musical features and popularity over time",
x = "Year",
y = "Average Value") +
theme_minimal()
# Combine the datasets, adding a column to distinguish them
combined_data <- bind_rows(
mutate(data_train, Set = "Training"),
mutate(data_valid, Set = "Validation"),
mutate(data_test, Set = "Test")
)
# Checking if the distribution of popularity is similar in the three datasets
ggplot(combined_data, aes(x = Popularity, colour = Set)) +
geom_density(trim = T, linewidth = 1) +
labs(title = "Popularity Distribution Across Datasets",
x = "Popularity",
y = "Frequency") +
theme_minimal()
# Prepare model matrices
x <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_train)[, -1]
y <- data_train$Popularity
x_valid <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_valid)[, -1]
y_valid <- data_valid$Popularity
# Lasso Regression with cross-validation
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda <- cv_lasso$lambda.min
# Fit final model
lasso_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
# Predict on validation data
pred_valid <- predict(lasso_model, s = best_lambda, newx = x_valid)
# Compute validation MSE
lasso_mse <- mean((y_valid - pred_valid)^2)
lasso_mse
coef(lasso_model)
# Prepare model matrices
x <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_train)[, -1]
y <- data_train$Popularity
x_valid <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_valid)[, -1]
y_valid <- data_valid$Popularity
# Lasso Regression with cross-validation
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda <- cv_lasso$lambda.min
# Fit final model
lasso_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
# Predict on validation data
pred_valid <- predict(lasso_model, s = best_lambda, newx = x_valid)
# Compute validation MSE
lasso_mse <- mean((y_valid - pred_valid)^2)
lasso_mse
coef(lasso_model)
# Extract and tidy coefficients
lasso_coef <- coef(lasso_model)
lasso_coef_df <- as.data.frame(as.matrix(lasso_coef))
lasso_coef_df <- lasso_coef_df %>%
rownames_to_column(var = "Feature") %>%
rename(Coefficient = `s1`) %>%
filter(Coefficient != 0) %>%
arrange(desc(abs(Coefficient)))  # sort by magnitude
# Prepare model matrices
x <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_train)[, -1]
y <- data_train$Popularity
x_valid <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_valid)[, -1]
y_valid <- data_valid$Popularity
# Lasso Regression with cross-validation
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda <- cv_lasso$lambda.min
# Fit final model
lasso_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
# Predict on validation data
pred_valid <- predict(lasso_model, s = best_lambda, newx = x_valid)
# Compute validation MSE
lasso_mse <- mean((y_valid - pred_valid)^2)
lasso_mse
coef(lasso_model)
# Extract coefficients from Lasso model
lasso_coef <- coef(lasso_model)
# Convert to data frame
lasso_coef_df <- as.data.frame(as.matrix(lasso_coef))
colnames(lasso_coef_df) <- "Coefficient"
# Voeg de feature namen toe
lasso_coef_df <- lasso_coef_df %>%
rownames_to_column(var = "Feature") %>%
filter(Coefficient != 0) %>%
arrange(desc(abs(Coefficient)))
# Mooi weergeven
kable(lasso_coef_df, caption = "Significante Predictoren volgens Lasso-regressie") %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "600px", height = "400px")
# Prepare model matrices
x <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_train)[, -1]
y <- data_train$Popularity
x_valid <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_valid)[, -1]
y_valid <- data_valid$Popularity
# Lasso Regression with cross-validation
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda <- cv_lasso$lambda.min
# Fit final model
lasso_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
# Predict on validation data
pred_valid <- predict(lasso_model, s = best_lambda, newx = x_valid)
# Compute validation MSE
lasso_mse <- mean((y_valid - pred_valid)^2)
lasso_mse
# Extract coefficients from Lasso model
lasso_coef <- coef(lasso_model)
# Convert to data frame
lasso_coef_df <- as.data.frame(as.matrix(lasso_coef))
colnames(lasso_coef_df) <- "Coefficient"
# feature names
lasso_coef_df <- lasso_coef_df %>%
rownames_to_column(var = "Feature") %>%
filter(Coefficient != 0) %>%
arrange(desc(abs(Coefficient)))
# table
kable(lasso_coef_df, caption = "Significant Predictors") %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "600px", height = "400px")
# Prepare model matrices
x <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_train)[, -1]
y <- data_train$Popularity
x_valid <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_valid)[, -1]
y_valid <- data_valid$Popularity
# Lasso Regression with cross-validation
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda <- cv_lasso$lambda.min
# Fit final model
lasso_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
# Predict on validation data
pred_valid <- predict(lasso_model, s = best_lambda, newx = x_valid)
# Compute validation MSE
lasso_mse <- mean((y_valid - pred_valid)^2)
lasso_mse
# Extract coefficients from Lasso model
lasso_coef <- coef(lasso_model)
# Convert to data frame
lasso_coef_df <- as.data.frame(as.matrix(lasso_coef))
colnames(lasso_coef_df) <- "Coefficient"
# feature names
lasso_coef_df <- lasso_coef_df %>%
rownames_to_column(var = "Feature") %>%
filter(Coefficient != 0) %>%
arrange(desc(abs(Coefficient)))
# Zet MSE-waarden in een data frame
mse_df <- data.frame(
Model = c("Lineaire Regressie", "Lasso Regressie"),
MSE = c(lm_mse, lasso_mse)
)
lm_model <- lm(Popularity ~ . - Index - Title - Artist - Top.Genre, data = data_train)
pred_lm <- predict(lm_model, newdata = data_valid)
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings({
library(dplyr)
library(ggplot2)
library(ggpubr)
library(kableExtra)
library(tidyverse)
library(readr)
library(knitr)
library(weathermetrics)
library(gridExtra)
library(plotly)
library(GGally)
library(magrittr)
library(regclass)
library(MASS)
library(pROC)
library(caret)
library(car)
library(glmnet)
})
# Set seed for reproducibility
set.seed(123)
data <- read.csv("data/Spotify-2000.csv")
kable(head(data, 10)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "800px", height = "500px")
kable(tail(data, 10)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "800px", height = "500px")
str(data)
#mutate our data so character values become factors
data <- data %>%
mutate_if(is.character, as.factor) %>%
mutate(Length..Duration. = as.integer(Length..Duration.))
str(data)
numeric_columns <- data %>%
dplyr::select(where(is.numeric)) %>%
dplyr::select(-any_of("ID"))
# Plot de heatmap
ggcorr(
numeric_columns,
label = FALSE,
layout.exp = 1,
low = "#7FFF7F",          # groen voor lage correlatie
mid = "white",
high = "#FF4C4C",         # rood voor hoge correlatie
name = "Correlatie"
) +
labs(
title = "Correlatie tussen numerieke variabelen",
caption = "Rood = sterke correlatie, Groen = zwak of geen correlatie"
)
data_long <- data %>%
dplyr::select(Year, Danceability, Energy, Loudness..dB., Popularity) %>%
pivot_longer(cols = c(Danceability, Energy, Loudness..dB., Popularity),
names_to = "Feature",
values_to = "Value") %>%
group_by(Year, Feature) %>%
summarise(Avg_Value = mean(Value, na.rm = TRUE), .groups = "drop")
ggplot(data_long, aes(x = Year, y = Avg_Value, color = Feature)) +
geom_line(size = 1) +
labs(title = "Trends of some musical features and popularity over time",
x = "Year",
y = "Average Value") +
theme_minimal()
# Combine the datasets, adding a column to distinguish them
combined_data <- bind_rows(
mutate(data_train, Set = "Training"),
mutate(data_valid, Set = "Validation"),
mutate(data_test, Set = "Test")
)
# Checking if the distribution of popularity is similar in the three datasets
ggplot(combined_data, aes(x = Popularity, colour = Set)) +
geom_density(trim = T, linewidth = 1) +
labs(title = "Popularity Distribution Across Datasets",
x = "Popularity",
y = "Frequency") +
theme_minimal()
# Prepare model matrices
x <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_train)[, -1]
y <- data_train$Popularity
x_valid <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_valid)[, -1]
y_valid <- data_valid$Popularity
# Lasso Regression with cross-validation
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda <- cv_lasso$lambda.min
# Fit final model
lasso_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
# Predict on validation data
pred_valid <- predict(lasso_model, s = best_lambda, newx = x_valid)
# Compute validation MSE
lasso_mse <- mean((y_valid - pred_valid)^2)
lasso_mse
# Extract coefficients from Lasso model
lasso_coef <- coef(lasso_model)
# Convert to data frame
lasso_coef_df <- as.data.frame(as.matrix(lasso_coef))
colnames(lasso_coef_df) <- "Coefficient"
# feature names
lasso_coef_df <- lasso_coef_df %>%
rownames_to_column(var = "Feature") %>%
filter(Coefficient != 0) %>%
arrange(desc(abs(Coefficient)))
# table
kable(lasso_coef_df, caption = "Significant Predictors") %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "600px", height = "400px")
lm_model <- lm(Popularity ~ . - Index - Title - Artist - Top.Genre, data = data_train)
pred_lm <- predict(lm_model, newdata = data_valid)
lm_model <- lm(Popularity ~ . - Index - Title - Artist - Top.Genre, data = data_train)
pred_lm <- predict(lm_model, newdata = data_valid)
# Fit lineair model zonder character/factor kolommen zoals Title, Artist, etc.
lm_model <- lm(Popularity ~ . - Index - Title - Artist - Top.Genre, data = data_train)
# Voorspel op validation data
pred_lm <- predict(lm_model, newdata = data_valid)
# Prepare model matrices
x <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_train)[, -1]
y <- data_train$Popularity
x_valid <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_valid)[, -1]
y_valid <- data_valid$Popularity
# Lasso Regression with cross-validation
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda <- cv_lasso$lambda.min
# Fit final model
lasso_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
# Predict on validation data
pred_valid <- predict(lasso_model, s = best_lambda, newx = x_valid)
# Compute validation MSE
lasso_mse <- mean((y_valid - pred_valid)^2)
lasso_mse
# Extract coefficients from Lasso model
lasso_coef <- coef(lasso_model)
# Convert to data frame
lasso_coef_df <- as.data.frame(as.matrix(lasso_coef))
colnames(lasso_coef_df) <- "Coefficient"
# feature names
lasso_coef_df <- lasso_coef_df %>%
rownames_to_column(var = "Feature") %>%
filter(Coefficient != 0) %>%
arrange(desc(abs(Coefficient)))
# table
kable(lasso_coef_df, caption = "Significant Predictors") %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "600px", height = "400px")
# Prepare model matrices
x <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_train)[, -1]
y <- data_train$Popularity
x_valid <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_valid)[, -1]
y_valid <- data_valid$Popularity
# Lasso Regression with cross-validation
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda <- cv_lasso$lambda.min
# Fit final model
lasso_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
# Predict on validation data
pred_valid <- predict(lasso_model, s = best_lambda, newx = x_valid)
# Compute validation MSE
lasso_mse <- mean((y_valid - pred_valid)^2)
lasso_mse
coef(lasso_model)
# Extract coefficients from Lasso model
lasso_coef <- coef(lasso_model)
# Convert to data frame
lasso_coef_df <- as.data.frame(as.matrix(lasso_coef))
colnames(lasso_coef_df) <- "Coefficient"
# feature names
lasso_coef_df <- lasso_coef_df %>%
rownames_to_column(var = "Feature") %>%
filter(Coefficient != 0) %>%
arrange(desc(abs(Coefficient)))
# table
kable(lasso_coef_df, caption = "Significant Predictors") %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "600px", height = "400px")
# Combine the datasets, adding a column to distinguish them
combined_data <- bind_rows(
mutate(data_train, Set = "Training"),
mutate(data_valid, Set = "Validation"),
mutate(data_test, Set = "Test")
)
# Checking if the distribution of popularity is similar in the three datasets
ggplot(combined_data, aes(x = Popularity, colour = Set)) +
geom_density(trim = T, linewidth = 1) +
labs(title = "Popularity Distribution Across Datasets",
x = "Popularity",
y = "Frequency") +
theme_minimal()
set.seed(123)
# Combine the datasets, adding a column to distinguish them
combined_data <- bind_rows(
mutate(data_train, Set = "Training"),
mutate(data_valid, Set = "Validation"),
mutate(data_test, Set = "Test")
)
# Checking if the distribution of popularity is similar in the three datasets
ggplot(combined_data, aes(x = Popularity, colour = Set)) +
geom_density(trim = T, linewidth = 1) +
labs(title = "Popularity Distribution Across Datasets",
x = "Popularity",
y = "Frequency") +
theme_minimal()
# 70% train, 15% validation, 15% test
set.seed(123)
n <- nrow(data)
train_index <- sample(1:n, size = 0.7 * n)
remaining <- setdiff(1:n, train_index)
valid_index <- sample(remaining, size = 0.5 * length(remaining))
test_index <- setdiff(remaining, valid_index)
data_train <- data[train_index, ]
data_valid <- data[valid_index, ]
data_test  <- data[test_index, ]
# Combine the datasets, adding a column to distinguish them
combined_data <- bind_rows(
mutate(data_train, Set = "Training"),
mutate(data_valid, Set = "Validation"),
mutate(data_test, Set = "Test")
)
# Checking if the distribution of popularity is similar in the three datasets
ggplot(combined_data, aes(x = Popularity, colour = Set)) +
geom_density(trim = T, linewidth = 1) +
labs(title = "Popularity Distribution Across Datasets",
x = "Popularity",
y = "Frequency") +
theme_minimal()
# Prepare model matrices
x <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_train)[, -1]
y <- data_train$Popularity
x_valid <- model.matrix(Popularity ~ . - Index - Title - Artist - Top.Genre, data_valid)[, -1]
y_valid <- data_valid$Popularity
# Lasso Regression with cross-validation
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda <- cv_lasso$lambda.min
# Fit final model
lasso_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
# Predict on validation data
pred_valid <- predict(lasso_model, s = best_lambda, newx = x_valid)
# Compute validation MSE
lasso_mse <- mean((y_valid - pred_valid)^2)
lasso_mse
coef(lasso_model)
# Extract coefficients from Lasso model
lasso_coef <- coef(lasso_model)
# Convert to data frame
lasso_coef_df <- as.data.frame(as.matrix(lasso_coef))
colnames(lasso_coef_df) <- "Coefficient"
# feature names
lasso_coef_df <- lasso_coef_df %>%
rownames_to_column(var = "Feature") %>%
filter(Coefficient != 0) %>%
arrange(desc(abs(Coefficient)))
# table
kable(lasso_coef_df, caption = "Significant Predictors") %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "600px", height = "400px")
